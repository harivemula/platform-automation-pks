---
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource


resources:
- name: platform-automation
  type: pivnet
  source:
    product_slug: platform-automation
    api_token: ((pivnet-refresh-token))
- name: config
  type: git
  source:
    uri: ((pipeline-repo))
    private_key: ((plat-auto-pipes-deploy-key.private_key))
    branch: master

- name: installation
  type: gcs
  source:
    regexp: installations/installation-(.*).zip
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp_service_account_json))

- name: opsman-image
  type: pivnet
  source:
    api_token: ((pivnet-refresh-token))
    product_slug: ops-manager
    product_version: 2.7.*
    sort_by: semver

credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server)) 
    CREDHUB_CA_CERT: ((credhub-ca-cert))
    PREFIX: ((credhub-prefix))
  input_mapping:
    files: config
  output_mapping:
    interpolated-files: interpolated-config

jobs:
- name: upgrade-opsmanager
  serial: true
  plan: 
  - in_parallel:
    - get: platform-automation-image
      resource: platform-automation
      params:
        globs: ["*image*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        globs: ["*tasks*.zip"]
        unpack: true
    - get: config
    - get: opsman-image
      trigger: true
      params:
        globs:
        - 'ops-manager-gcp*.yml'

  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-config
    params:
      ENV_FILE: env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    params:
      file: installation/installation*.zip
  - task: upgrade-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
      state: interpolated-config
      config: interpolated-config
      env: interpolated-config
    params:
      ENV_FILE: env.yml
      OPSMAN_CONFIG_FILE: opsman.yml
      STATE_FILE: state.yml
      VARS_FILES: config/vars.yml
    ensure:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: config
            file-source: generated-state
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: state.yml
            GIT_AUTHOR_EMAIL: ((git-author-email)) 
            GIT_AUTHOR_NAME: "PCF Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: config
          params:
            repository: configuration-commit
            merge: true
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-config
    params:
      ENV_FILE: env.yml
  - task: after-upgrade-export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-config
    params:
      ENV_FILE: env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    params:
      file: installation/installation*.zip



